************* Module example
example.py:1: [C0111(missing-docstring), ] Missing module docstring
example.py:3: [E0401(import-error), ] Unable to import 'httplib'
example.py:6: [E0401(import-error), ] Unable to import 'new'
example.py:8: [E0401(import-error), ] Unable to import 'sauceclient'
example.py:9: [E0401(import-error), ] Unable to import 'selenium'
example.py:10: [E0401(import-error), ] Unable to import 'sauceclient'
example.py:16: [C0103(invalid-name), ] Constant name "sauce" doesn't conform to UPPER_CASE naming style
example.py:18: [C0103(invalid-name), ] Constant name "browsers" doesn't conform to UPPER_CASE naming style
example.py:26: [C0111(missing-docstring), on_platforms] Missing function docstring
example.py:30: [C0103(invalid-name), on_platforms.decorator] Variable name "d" doesn't conform to snake_case naming style
example.py:37: [C0111(missing-docstring), SauceSampleTest] Missing class docstring
example.py:40: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example.py:44: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example.py:49: [C0111(missing-docstring), SauceSampleTest.test_sauce] Missing method docstring
example.py:3: [W0611(unused-import), ] Unused import httplib
example.py:4: [W0611(unused-import), ] Unused import base64
example.py:5: [W0611(unused-import), ] Unused import json
example.py:8: [W0611(unused-import), ] Unused import sauceclient
example.py:10: [C0412(ungrouped-imports), ] Imports from package sauceclient are not grouped
************* Module example2
example2.py:26: [C0326(bad-whitespace), ] No space allowed before bracket
    print (decorator)
          ^
example2.py:1: [C0111(missing-docstring), ] Missing module docstring
example2.py:3: [E0401(import-error), ] Unable to import 'httplib'
example2.py:6: [E0401(import-error), ] Unable to import 'new'
example2.py:8: [W0404(reimported), ] Reimport 'os' (imported line 1)
example2.py:9: [E0401(import-error), ] Unable to import 'selenium'
example2.py:14: [C0103(invalid-name), ] Constant name "browsers" doesn't conform to UPPER_CASE naming style
example2.py:18: [C0111(missing-docstring), on_platforms] Missing function docstring
example2.py:22: [C0103(invalid-name), on_platforms.decorator] Variable name "d" doesn't conform to snake_case naming style
example2.py:30: [C0111(missing-docstring), SauceSampleTest] Missing class docstring
example2.py:33: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example2.py:37: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example2.py:42: [C0111(missing-docstring), SauceSampleTest.test_sauce] Missing method docstring
example2.py:3: [W0611(unused-import), ] Unused import httplib
example2.py:4: [W0611(unused-import), ] Unused import base64
example2.py:5: [W0611(unused-import), ] Unused import json
example2.py:8: [C0412(ungrouped-imports), ] Imports from package os are not grouped
************* Module example3
example3.py:1: [C0111(missing-docstring), ] Missing module docstring
example3.py:3: [E0401(import-error), ] Unable to import 'httplib'
example3.py:6: [E0401(import-error), ] Unable to import 'new'
example3.py:8: [E0401(import-error), ] Unable to import 'sauceclient'
example3.py:9: [E0401(import-error), ] Unable to import 'selenium'
example3.py:10: [E0401(import-error), ] Unable to import 'sauceclient'
example3.py:16: [C0103(invalid-name), ] Constant name "sauce" doesn't conform to UPPER_CASE naming style
example3.py:18: [C0103(invalid-name), ] Constant name "browsers" doesn't conform to UPPER_CASE naming style
example3.py:26: [C0111(missing-docstring), on_platforms] Missing function docstring
example3.py:30: [C0103(invalid-name), on_platforms.decorator] Variable name "d" doesn't conform to snake_case naming style
example3.py:37: [C0111(missing-docstring), SauceSampleTest] Missing class docstring
example3.py:40: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example3.py:44: [E1101(no-member), SauceSampleTest.setUp] Instance of 'SauceSampleTest' has no 'desired_capabilities' member
example3.py:49: [C0111(missing-docstring), SauceSampleTest.test_sauce] Missing method docstring
example3.py:3: [W0611(unused-import), ] Unused import httplib
example3.py:4: [W0611(unused-import), ] Unused import base64
example3.py:5: [W0611(unused-import), ] Unused import json
example3.py:8: [W0611(unused-import), ] Unused import sauceclient
example3.py:10: [C0412(ungrouped-imports), ] Imports from package sauceclient are not grouped
************* Module py1
py1.py:1: [C0111(missing-docstring), ] Missing module docstring
py1.py:2: [C0103(invalid-name), f] Function name "f" doesn't conform to snake_case naming style
py1.py:2: [C0111(missing-docstring), f] Missing function docstring
py1.py:5: [C0111(missing-docstring), test_function] Missing function docstring
************* Module sel
sel.py:34: [C0305(trailing-newlines), ] Trailing newlines
sel.py:1: [C0111(missing-docstring), ] Missing module docstring
sel.py:2: [E0401(import-error), ] Unable to import 'selenium'
sel.py:3: [E0401(import-error), ] Unable to import 'selenium.webdriver.common.keys'
sel.py:5: [C0111(missing-docstring), PythonOrgSearch] Missing class docstring
sel.py:10: [C0111(missing-docstring), PythonOrgSearch.test_search_in_python_org] Missing method docstring
sel.py:19: [C0111(missing-docstring), PythonOrgSearch.test_google] Missing method docstring
************* Module sel2
sel2.py:1: [C0111(missing-docstring), ] Missing module docstring
sel2.py:2: [E0401(import-error), ] Unable to import 'selenium'
sel2.py:4: [C0103(invalid-name), ] Constant name "sauce_url" doesn't conform to UPPER_CASE naming style
sel2.py:6: [C0103(invalid-name), ] Constant name "desired_capabilities" doesn't conform to UPPER_CASE naming style
sel2.py:11: [C0103(invalid-name), ] Constant name "driver" doesn't conform to UPPER_CASE naming style
sel2.py:19: [E0401(import-error), ] Unable to import 'sauceclient'
sel2.py:19: [C0413(wrong-import-position), ] Import "from sauceclient import SauceClient" should be placed at the top of the module
sel2.py:21: [C0103(invalid-name), ] Constant name "sauce_client" doesn't conform to UPPER_CASE naming style
************* Module test
test.py:1: [C0111(missing-docstring), ] Missing module docstring
test.py:9: [C0111(missing-docstring), SimpleTest] Missing class docstring
test.py:11: [C0111(missing-docstring), SimpleTest.test_skipped] Missing method docstring
test.py:14: [C0111(missing-docstring), SimpleTest.test_pass] Missing method docstring
test.py:17: [C0111(missing-docstring), SimpleTest.test_fail] Missing method docstring
test.py:3: [W0611(unused-import), ] Unused import random
test.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==example3:0
==example:0
import os
import sys
import httplib
import base64
import json
import new
import unittest
import sauceclient
from selenium import webdriver
from sauceclient import SauceClient

# it's best to remove the hardcoded defaults and always get these values
# from environment variables
USERNAME = os.environ.get('SAUCE_USERNAME', "JeremyM")
ACCESS_KEY = os.environ.get('SAUCE_ACCESS_KEY', "880f1a08-8d30-4c5d-b379-596a9f72f40e")
sauce = SauceClient(USERNAME, ACCESS_KEY)

browsers = [{"platform": "Mac OS X 10.9",
             "browserName": "chrome",
             "version": "31"},
            {"platform": "Windows 8.1",
             "browserName": "internet explorer",
             "version": "11"}]


def on_platforms(platforms):
    def decorator(base_class):
        module = sys.modules[base_class.__module__].__dict__
        for i, platform in enumerate(platforms):
            d = dict(base_class.__dict__)
            d['desired_capabilities'] = platform
            name = "%s_%s" % (base_class.__name__, i + 1)
            module[name] = new.classobj(name, (base_class,), d)
    return decorator


@on_platforms(browsers)
class SauceSampleTest(unittest.TestCase):
    def setUp(self):
        self.desired_capabilities['name'] = self.id()

        sauce_url = "http://%s:%s@ondemand.saucelabs.com:80/wd/hub"
        self.driver = webdriver.Remote(
            desired_capabilities=self.desired_capabilities,
            command_executor=sauce_url % (USERNAME, ACCESS_KEY)
        )
        self.driver.implicitly_wait(30)

    def test_sauce(self):
        self.driver.get('http://saucelabs.com/test/guinea-pig')
        assert "I am a page title - Sauce Labs" in self.driver.title
        comments = self.driver.find_element_by_id('comments')
        comments.send_keys('Hello! I am some example comments.'
                           ' I should be in the page after submitting the form')
        self.driver.find_element_by_id('submit').click()

        commented = self.driver.find_element_by_id('your_comments')
        assert ('Your comments: Hello! I am some example comments.'
                ' I should be in the page after submitting the form'
                in commented.text)
        body = self.driver.find_element_by_xpath('//body')
        assert 'I am some other page content' not in body.text
        self.driver.find_elements_by_link_text('i am a link')[0].click()
        body = self.driver.find_element_by_xpath('//body')
        assert 'I am some other page content' in body.text

    def tearDown(self):
        print("Link to your job: https://saucelabs.com/jobs/%s" % self.driver.session_id)
        try:
            if sys.exc_info() == (None, None, None):
                sauce.jobs.update_job(self.driver.session_id, passed=True)
            else:
                sauce.jobs.update_job(self.driver.session_id, passed=False)
        finally:
            self.driver.quit()
test.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==example2:38
==example3:45
==example:45
        )
        self.driver.implicitly_wait(30)

    def test_sauce(self):
        self.driver.get('http://saucelabs.com/test/guinea-pig')
        assert "I am a page title - Sauce Labs" in self.driver.title
        comments = self.driver.find_element_by_id('comments')
        comments.send_keys('Hello! I am some example comments.'
                           ' I should be in the page after submitting the form')
        self.driver.find_element_by_id('submit').click()

        commented = self.driver.find_element_by_id('your_comments')
        assert ('Your comments: Hello! I am some example comments.'
                ' I should be in the page after submitting the form'
                in commented.text)
        body = self.driver.find_element_by_xpath('//body')
        assert 'I am some other page content' not in body.text
        self.driver.find_elements_by_link_text('i am a link')[0].click()
        body = self.driver.find_element_by_xpath('//body')
        assert 'I am some other page content' in body.text

    def tearDown(self):
test.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==example2:26
==example3:33
==example:33
    return decorator


@on_platforms(browsers)
class SauceSampleTest(unittest.TestCase):
    def setUp(self):
        self.desired_capabilities['name'] = self.id()

test.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==example2:17
==example3:25
==example:25
def on_platforms(platforms):
    def decorator(base_class):
        module = sys.modules[base_class.__module__].__dict__
        for i, platform in enumerate(platforms):
            d = dict(base_class.__dict__)
            d['desired_capabilities'] = platform
            name = "%s_%s" % (base_class.__name__, i + 1)
            module[name] = new.classobj(name, (base_class,), d)
test.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==example2:0
==example3:0
==example:0
import os
import sys
import httplib
import base64
import json
import new
import unittest

------------------------------------------------------------------
Your code has been rated at 0.83/10 (previous run: 0.83/10, +0.00)

