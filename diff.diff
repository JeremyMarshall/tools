diff --git a/.gitignore b/.gitignore
index 6a5b103..5c1f09d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,6 +3,4 @@ job-dsl-stub-plugin.iml
 target
 .DS_Store
 work
-.gradle/
-build/
 
diff --git a/build.gradle b/build.gradle
deleted file mode 100644
index 532f495..0000000
--- a/build.gradle
+++ /dev/null
@@ -1,70 +0,0 @@
-buildscript {
-    repositories {
-        // The plugin is currently only available via the Jenkins
-        // Maven repository, but has dependencies in Maven Central.
-        mavenCentral()
-        maven {
-            url 'http://repo.jenkins-ci.org/releases/'
-        }
-    }
-    dependencies {
-        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.10.0'
-        classpath 'net.saliman:gradle-cobertura-plugin:2.2.7'
-    }
-}
-
-apply plugin: 'org.jenkins-ci.jpi'
-apply plugin: 'idea'
-apply plugin: 'cobertura'
-apply plugin: 'codenarc'
-
-sourceCompatibility = 1.6
-targetCompatibility = 1.6
-
-codenarc {
-    toolVersion = '0.21'
-    configFile = file('config/codenarc/rules.groovy')
-}
-
-codenarcTest {
-    configFile = file('config/codenarc/rules-test.groovy')
-}
-
-cobertura{
-    //coverageFormats = ['html', 'xml']
-    coverageSourceDirs = [project.sourceSets.main.java.srcDirs,
-                          project.sourceSets.main.groovy.srcDirs]
-    coverageIgnoreTrivial = true
-}
-
-repositories {
-    mavenCentral()
-}
-
-dependencies {
-    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
-    jenkinsTest 'org.jenkins-ci.plugins:ant:1.1@jar',
-            'org.jenkins-ci.plugins:javadoc:1.0@jar'
-}
-
-group = 'org.jenkins-ci.plugins'
-version = '0.0.1-SNAPSHOT'
-description = 'Stub classes to progrematically create jobs'
-
-jenkinsPlugin {
-    coreVersion = '1.595'
-    displayName = 'DSL stub plugin'
-    url = 'https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Stub+Plugin'
-    gitHubUrl = 'https://github.com/jenkinsci/job-dsl-stub-plugin'
-    developers {
-        developer {
-            id 'jeremym'
-            name 'Jeremy Marshall'
-            email 'jeremystuartmarshall@gmail.com'
-        }
-    }
-}
-
-task wrapper(type: Wrapper) {
-    gradleVersion = '2.3'
-}
diff --git a/config/codenarc/rules-test.groovy b/config/codenarc/rules-test.groovy
deleted file mode 100644
index 58cf64d..0000000
--- a/config/codenarc/rules-test.groovy
+++ /dev/null
@@ -1,29 +0,0 @@
-ruleset {
-    ruleset('rulesets/junit.xml') {
-        // Spock ...
-        exclude 'JUnitPublicNonTestMethod'
-    }
-
-    ruleset('file:config/codenarc/rules.groovy') {
-        'UnusedVariable' {
-            ignoreVariableNames = 'ignored'
-        }
-
-        // that's OK for test code
-        exclude 'ComparisonWithSelf'
-        // that's OK for test code
-        exclude 'ExplicitCallToCompareToMethod'
-        // that's OK for test code
-        exclude 'ExplicitCallToEqualsMethod'
-        // Spock encourages to violate this rule
-        exclude 'MethodName'
-        // Fields annotated with @org.junit.Rule violate this rule
-        exclude 'NonFinalPublicField'
-        // Fields annotated with @org.junit.Rule violate this rule
-        exclude 'PublicInstanceField'
-        // Spock's data tables violate this rule
-        exclude 'UnnecessaryBooleanExpression'
-        // causes false negatives
-        exclude 'UnusedObject'
-    }
-}
diff --git a/config/codenarc/rules.groovy b/config/codenarc/rules.groovy
deleted file mode 100644
index 8fa4af6..0000000
--- a/config/codenarc/rules.groovy
+++ /dev/null
@@ -1,88 +0,0 @@
-ruleset {
-    ruleset('rulesets/basic.xml')
-
-    ruleset('rulesets/braces.xml')
-
-    ruleset('rulesets/concurrency.xml')
-
-    ruleset('rulesets/convention.xml') {
-        // this rule does not necessarily lead to better code
-        exclude 'IfStatementCouldBeTernary'
-    }
-
-    ruleset('rulesets/design.xml') {
-        // we don't care
-        exclude 'AbstractClassWithoutAbstractMethod'
-        // we don't care
-        exclude 'BuilderMethodWithSideEffects'
-    }
-
-    // the DRY rules do not necessarily lead to better code
-    // ruleset('rulesets/dry.xml')
-
-    // these rules cause compilation failure warnings
-    // ruleset('rulesets/enhanced.xml')
-
-    ruleset('rulesets/exceptions.xml')
-
-    ruleset('rulesets/formatting.xml') {
-        // enforce at least one space after map entry colon
-        SpaceAroundMapEntryColon {
-            characterAfterColonRegex = /\s/
-            characterBeforeColonRegex = /./
-        }
-
-        // we don't care for now
-        exclude 'ClassJavadoc'
-    }
-
-    ruleset('rulesets/generic.xml')
-
-    ruleset('rulesets/groovyism.xml') {
-        // framework methods should be allowed to call leftShift explicitly
-        ExplicitCallToLeftShiftMethod {
-            ignoreThisReference = true
-        }
-
-        // not necessarily an issue, problems should be detected by unit tests
-        exclude 'GStringExpressionWithinString'
-    }
-
-    ruleset('rulesets/imports.xml') {
-        // we order static imports after other imports because that's the default style in IDEA
-        MisorderedStaticImports {
-            comesBefore = false
-        }
-    }
-
-    ruleset('rulesets/logging.xml')
-
-    ruleset('rulesets/naming.xml') {
-        // this is an issue, but currently the Context classes violate this by convention
-        exclude 'ConfusingMethodName'
-        // we don't care for now
-        exclude 'FactoryMethodName'
-    }
-
-    ruleset('rulesets/security.xml') {
-        // we don't care because our classes need not to satisfy the Java Beans specification
-        exclude 'JavaIoPackageAccess'
-    }
-
-    ruleset('rulesets/serialization.xml') {
-        // we don't care because we are not using Java serialization
-        exclude 'SerializableClassMustDefineSerialVersionUID'
-    }
-
-    // we don't care for now
-    // ruleset('rulesets/size.xml')
-
-    ruleset('rulesets/unnecessary.xml') {
-        // we don't care, does not necessarily lead to better code
-        exclude 'UnnecessaryElseStatement'
-        // we don't care for now, does not necessarily lead to better code
-        exclude 'UnnecessaryObjectReferences'
-    }
-
-    ruleset('rulesets/unused.xml')
-}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 085a1cd..0000000
Binary files a/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index 0d2970b..0000000
--- a/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-#Sat Mar 07 09:42:59 EST 2015
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-all.zip
diff --git a/gradlew b/gradlew
deleted file mode 100755
index 91a7e26..0000000
--- a/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
deleted file mode 100644
index aec9973..0000000
--- a/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/pom.xml b/pom.xml
index 97b1b2e..e3c041f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -102,5 +102,11 @@
 </plugins>
   </build>
   <dependencies>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-all</artifactId>
+      <!-- any version of Groovy \>= 1.8.2 should work here -->
+      <version>1.8.9</version>
+    </dependency>
   </dependencies>
 </project>
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.groovy
deleted file mode 100644
index c0721a9..0000000
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.groovy
+++ /dev/null
@@ -1,7 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub;
-
-/**
- * Created by jeremymarshall on 26/01/2015.
- */
-public class DslClosureUnsupported extends Exception {
-}
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLink.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLink.groovy
deleted file mode 100644
index 4f3ccec..0000000
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLink.groovy
+++ /dev/null
@@ -1,120 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import com.thoughtworks.xstream.XStream;
-import hudson.Extension;
-import hudson.model.Describable;
-import hudson.model.Descriptor;
-import hudson.model.ManagementLink;
-import jenkins.model.Jenkins;
-import org.jenkinsci.plugins.jobdsl.stub.Factory
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category
-import org.jenkinsci.plugins.jobdsl.stub.model.Class
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Closure
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Axis
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Method
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Step;
-
-@Extension
-public class DslLink extends ManagementLink implements Describable<DslLink> {
-    private Factory factory = new Factory();
-    private String dslInterface
-
-    DslLink() {
-        buildDslInterface()
-    }
-
-    String buildDslInterface() {
-        List<String> builder = []
-
-        factory.categoriesAsList.each { cat ->
-
-            //this is probably fairly bad
-            if (cat.name == 'closure') {
-                return
-            }
-
-            builder << "//${cat.description}"
-            builder << "${cat.name} {"
-
-            cat.classes.sort().each { c ->
-                builder << "\t// ${Jenkins.instance.pluginManager.whichPlugin(c.clazz).toString()}"
-                builder += classDisplay(c, 0)
-            }
-            builder << '}'
-            builder << ''
-        }
-        dslInterface = builder.join("\n")
-    }
-
-    private final List<String> classDisplay(org.jenkinsci.plugins.jobdsl.stub.model.Class c, int indent) {
-
-        List<String> builder = []
-        indent++
-        String indentStr = '\t'.multiply(indent)
-        String indentStrParm = '\t'.multiply(indent + 1)
-
-        builder << "$indentStr// ${c.clazz}"
-        builder << ''
-
-        c.methods.sort().each { m ->
-            builder << "$indentStr// ${m.description}"
-
-            if(m.closureClass == NoClosure ) {
-                if (m.parameters.size() > 0) {
-                    builder << "$indentStr${m.name}"
-                    m.parameters.each { p ->
-                        builder << "$indentStrParm${p.description}" + (p == m.parameters.last() ? '' : ',')
-                    }
-                } else {
-                    builder << "$indentStr${m.name}()"
-                }
-            } else {
-                builder << "$indentStr${m.name} {"
-                org.jenkinsci.plugins.jobdsl.stub.model.Category cl2 = factory.getCategory(Closure)
-                org.jenkinsci.plugins.jobdsl.stub.model.Class cl3 = cl2.classes.find { it.clazz == m.closureClass }
-                builder += classDisplay( cl3, indent + 1)
-                builder << "$indentStr}"
-            }
-            builder << ''
-        }
-        builder
-    }
-
-    @Override
-    public String getDisplayName() {
-        return "Jenkins DSL";
-    }
-
-    @Override
-    public String getDescription() {
-        return "Stubs for Job-DSL";
-    }
-
-    @Override
-    public String getIconFileName() {
-        return "aaa.png";
-    }
-
-    @Override
-    public String getUrlName() {
-        return "dsl";
-    }
-
-    public String getDslInterface() {
-        return dslInterface
-    }
-
-    public Factory getFactory() {
-        return factory;
-    }
-
-    @SuppressWarnings("unchecked")
-    public Descriptor<DslLink> getDescriptor() {
-        return Jenkins.getInstance().getDescriptorOrDie(getClass());
-    }
-
-    @Extension // This indicates to Jenkins that this is an implementation of an extension point.
-    public static final class DescriptorImpl extends Descriptor<DslLink> {
-        String displayName = "DSL Link";
-    }
-}
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslNoClosureClass.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslNoClosureClass.groovy
deleted file mode 100644
index a7349d4..0000000
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/DslNoClosureClass.groovy
+++ /dev/null
@@ -1,7 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub;
-
-/**
- * Created by jeremymarshall on 26/01/2015.
- */
-public class DslNoClosureClass extends Exception {
-}
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/Factory.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/Factory.groovy
deleted file mode 100644
index 15c514a..0000000
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/Factory.groovy
+++ /dev/null
@@ -1,83 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import com.thoughtworks.xstream.XStream
-import hudson.util.XStream2
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category
-import org.jenkinsci.plugins.jobdsl.stub.model.Class
-
-/**
- * Created by jeremymarshall on 31/12/2014.
- */
-
-public class Factory  {
-
-    private Map<String, org.jenkinsci.plugins.jobdsl.stub.model.Category> categories;
-    private List<org.jenkinsci.plugins.jobdsl.stub.model.Category> categoriesAsList;
-    private XStream2 xstream;
-
-    public Factory() {
-        categories = new TreeMap<String, org.jenkinsci.plugins.jobdsl.stub.model.Category>();
-
-        xstream = new XStream2()
-        //scm classes need massaging as they have to appear
-        //<scm class='blah'>...<scm>
-        xstream.autodetectAnnotations(true)
-        for (Category a : Category.all()) {
-            add(a);
-        }
-
-        buildCategoriesAsList()
-
-        //maybe we need to massage the XML
-        //such as scm links need to be <scm class="blah">
-        //rather than <blah>...
-        for(Map.Entry<String,org.jenkinsci.plugins.jobdsl.stub.model.Category> entry : categories.entrySet()) {
-            String key = entry.getKey();
-            org.jenkinsci.plugins.jobdsl.stub.model.Category value = entry.getValue();
-
-            for(Class c : value.getClasses()) {
-                c.getInstance(false).xstreamAlias(xstream);
-            }
-        }
-
-    }
-
-    public Category add(Category a) {
-
-        if(!categories.containsKey(a.getCategory())) {
-            categories.put(a.getCategory(), new org.jenkinsci.plugins.jobdsl.stub.model.Category(a));
-        }
-
-        //so the individual categories are extension points too so
-        //they will appear in the list even when no actual plugins implement them
-        //keep them out of the classes though!
-
-        //if there are no methods it must be a category (step, scm, etc)
-        //don't forget to get your concrete classes to set this to true
-        if( a.hasMethods()) {
-            categories.get(a.getCategory()).add(a);
-        } else {
-            categories.get(a.getCategory()).update(a);
-        }
-
-        return a;
-    }
-
-    public void buildCategoriesAsList() {
-        categoriesAsList = new ArrayList<org.jenkinsci.plugins.jobdsl.stub.model.Category>(categories.values());
-        Arrays.sort(categoriesAsList)
-    }
-
-    public XStream2 getXStream() {
-        return xstream;
-    }
-
-    public org.jenkinsci.plugins.jobdsl.stub.model.Category getCategory( java.lang.Class c) {
-        return categories.get(c.getName());
-    }
-
-    public List<org.jenkinsci.plugins.jobdsl.stub.model.Category> getCategoriesAsList(){
-        return categoriesAsList.sort(true)
-    }
-
-}
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/NoClosure.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/NoClosure.groovy
deleted file mode 100644
index 3c5e3d9..0000000
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/NoClosure.groovy
+++ /dev/null
@@ -1,7 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-/**
- * Created by jeremymarshall on 6/02/2015.
- */
-class NoClosure {
-}
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Axis.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Axis.groovy
index e9580ba..8f91b3a 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Axis.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Axis.groovy
@@ -10,7 +10,7 @@ import hudson.Extension;
 public class Axis extends Category {
 
     @Override
-    public String getName() { return "axes";}
+    public String getName() { return "Axis";}
 
     @Override
     public String getDescription() { return "Classes for Matrix Axes";}
@@ -20,9 +20,5 @@ public class Axis extends Category {
         return Axis.class.getName();
     }
 
-    @Override
-    public int ordinal() {
-        50
-    }
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Category.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Category.groovy
index 8d4ae40..12600e7 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Category.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Category.groovy
@@ -1,12 +1,9 @@
-package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl
+package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl;
 
-import com.thoughtworks.xstream.XStream;
 import hudson.ExtensionList;
-import hudson.ExtensionPoint
-import hudson.util.XStream2;
+import hudson.ExtensionPoint;
 import jenkins.model.Jenkins;
 import org.jenkinsci.plugins.jobdsl.stub.DslClosureUnsupported;
-import org.jenkinsci.plugins.jobdsl.stub.DslNoClosureClass;
 
 /**
  * Created by jeremymarshall on 30/12/2014.
@@ -15,40 +12,42 @@ public abstract class Category implements ExtensionPoint {
 
     public abstract String getName();
     public abstract String getDescription();
+
     public abstract String getCategory();
-    public abstract int ordinal();
+
+    //where to direct closure call methods to
+    public Object getClosureDelegate() {
+        return null;
+    }
 
     //override this in classes which present methods
     public boolean hasMethods(){
         return false;
     };
 
-    public static ExtensionList<Category> all() {
-            Jenkins.getInstance().getExtensionList(Category.class)
-    }
+    //Use this if you have a new category (like step, etc)
+    //use the descendant like Step, Axis for any concrete plugins
 
-    public boolean xstreamAlias(XStream2 xstream) {
-        //items are fine the way they come out - scm items are not
-        return false
+    public static ExtensionList<Category> all() {
+        return Jenkins.getInstance().getExtensionList(Category.class);
     }
 
-    protected final Object runClosure(Object closure, java.lang.Class closureClass)
-            throws DslClosureUnsupported, DslNoClosureClass, IllegalAccessException, InstantiationException{
-
-        if (closureClass == null) {
-            throw new DslNoClosureClass();
-        }
+    protected final Object runClosure(Object closure)
+            throws DslClosureUnsupported, IllegalAccessException, InstantiationException{
 
-        Object closureDelegate = closureClass.newInstance();
+        Object closureDelegate = getClosureDelegate();
 
         if (closureDelegate == null) {
             throw new DslClosureUnsupported();
         }
 
+        //groovy.lang.Closure c = (groovy.lang.Closure) closure;
+
         closure.setDelegate(closureDelegate);
         closure.setResolveStrategy(groovy.lang.Closure.DELEGATE_FIRST);
         closure();
         return closureDelegate;
     }
+
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Closure.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Closure.groovy
index 4ca61cc..34bac76 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Closure.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Closure.groovy
@@ -9,7 +9,7 @@ import hudson.Extension;
 @Extension
 public class Closure extends Category {
     @Override
-    public String getName() { return "closure";}
+    public String getName() { return "Closure";}
 
     @Override
     public String getDescription() { return "Classes for Closures";}
@@ -19,9 +19,5 @@ public class Closure extends Category {
         return Closure.class.getName();
     }
 
-    @Override
-    public int ordinal() {
-        0
-    }
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Method.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Method.groovy
index 743fa8d..2e2e99b 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Method.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Method.groovy
@@ -1,6 +1,4 @@
-package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl
-
-import org.jenkinsci.plugins.jobdsl.stub.NoClosure;
+package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -15,8 +13,8 @@ import java.lang.annotation.Target;
 @Target(ElementType.METHOD)
 
 public @interface Method {
+    //public String name();
     public String description();
-    public Class closureClass() default NoClosure;
 }
 
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Publisher.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Publisher.groovy
index abdcc2f..8078ee8 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Publisher.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Publisher.groovy
@@ -10,7 +10,7 @@ import hudson.Extension;
 public class Publisher extends Category {
 
     @Override
-    public String getName() { return "publishers";}
+    public String getName() { return "Publisher";}
 
     @Override
     public String getDescription() { return "Classes for Publish steps";}
@@ -20,9 +20,5 @@ public class Publisher extends Category {
         return Publisher.class.getName();
     }
 
-    @Override
-    public int ordinal() {
-        150
-    }
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/SCM.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/SCM.groovy
index 2e8a746..edef875 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/SCM.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/SCM.groovy
@@ -1,6 +1,5 @@
-package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl
+package org.jenkinsci.plugins.jobdsl.stub.annotations.dsl;
 
-import com.thoughtworks.xstream.XStream;
 import hudson.Extension;
 
 /**
@@ -8,23 +7,17 @@ import hudson.Extension;
  */
 
 @Extension
-public class Scm extends Category {
+public class SCM extends Category {
 
     @Override
-    public String getName() { return "scm";}
+    public String getName() { return "SCM";}
 
     @Override
     public String getDescription() { return "Classes for SCM stage";}
 
     @Override
     public final String getCategory(){
-        return Scm.class.getName();
+        return SCM.class.getName();
     }
-
-    @Override
-    public int ordinal() {
-        10
-    }
-
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Step.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Step.groovy
index dd45572..a68972d 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Step.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/annotations/dsl/Step.groovy
@@ -9,7 +9,7 @@ import hudson.Extension;
 @Extension
 public class Step extends Category {
     @Override
-    public String getName() { return "steps";}
+    public String getName() { return "Step";}
 
     @Override
     public String getDescription() { return "Classes for Build steps";}
@@ -18,10 +18,5 @@ public class Step extends Category {
     public final String getCategory(){
         return Step.class.getName();
     }
-
-    @Override
-    public int ordinal() {
-        100
-    }
 }
 
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Category.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Category.groovy
index 713f1b0..91d46ec 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Category.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Category.groovy
@@ -1,6 +1,6 @@
-package org.jenkinsci.plugins.jobdsl.stub.model
+package org.jenkinsci.plugins.jobdsl.stub.model;
+
 
-import com.thoughtworks.xstream.XStream;
 import groovy.lang.Closure;
 import hudson.Extension;
 import hudson.model.Descriptor;
@@ -11,18 +11,16 @@ import java.util.*;
  * Created by jeremymarshall on 31/12/2014.
  */
 
-public class Category implements Comparable<Category>{
+public class Category implements Comparable{
 
     private List<Class> classes;
     private Map<String, List<Method>> methods;
     private String name;
     private String description;
-    private ordinal
 
     public Category(org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category b) {
         name = b.getName();
         description = b.getDescription();
-        ordinal = b.ordinal()
 
         classes = new ArrayList<Class>();
         methods = new HashMap<String, List<Method>>();
@@ -56,10 +54,6 @@ public class Category implements Comparable<Category>{
         return description;
     }
 
-    public org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category getClazz() {
-        return clazz
-    }
-
     public List<Class> getClasses() {
             return classes;
     }
@@ -98,8 +92,8 @@ public class Category implements Comparable<Category>{
     }
 
     @Override
-    public int compareTo(Category c) {
-        ordinal < c.ordinal;
+    public int compareTo(Object o) {
+        return this.toString().compareTo(o.toString());
     }
 
 }
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Class.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Class.groovy
index a50d043..cf1624d 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Class.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Class.groovy
@@ -13,7 +13,7 @@ import java.util.List;
  * Created by jeremymarshall on 31/12/2014.
  */
 
-public class Class implements Comparable<Class>{
+public class Class implements Comparable{
 
     private org.jenkinsci.plugins.jobdsl.stub.model.Category category;
     private java.lang.Class clazz;
@@ -21,7 +21,7 @@ public class Class implements Comparable<Class>{
     private String name;
     private String description;
     private String sourcePlugin;
-    private Category instance;
+    private Object instance;
 
     public Class(Category b, org.jenkinsci.plugins.jobdsl.stub.model.Category c) {
         clazz = b.getClass();
@@ -44,9 +44,9 @@ public class Class implements Comparable<Class>{
 
     public Object getInstance(boolean createNew) throws InstantiationException, IllegalAccessException {
         if(instance == null || createNew) {
-            this.instance =  clazz.newInstance();
+            instance = clazz.newInstance();
         }
-        return this.instance;
+        return instance;
     }
 
     public String getName(){
@@ -64,8 +64,8 @@ public class Class implements Comparable<Class>{
     public List<Method> getMethods() { return methods; }
 
     @Override
-    public int compareTo(Class c) {
-        return c.name.compareTo(c.name);
+    public int compareTo(Object o) {
+        return this.toString().compareTo(o.toString());
     }
 
 }
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Method.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Method.groovy
index 0d36d0f..68b3f87 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Method.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Method.groovy
@@ -12,12 +12,11 @@ import java.util.List;
  * Created by jeremymarshall on 31/12/2014.
  */
 
-public class Method implements Comparable<Method> {
+public class Method implements Comparable {
 
     private Class aClass;
     private String name;
     private String description;
-    private java.lang.Class closureClass;
     private java.lang.reflect.Method method;
     private List<Parameter> parameters;
 
@@ -25,7 +24,6 @@ public class Method implements Comparable<Method> {
         aClass = c;
         name = rm.getName();
         description = m.description();
-        closureClass = m.closureClass();
         method = rm;
 
         parameters = new ArrayList<Parameter>();
@@ -124,17 +122,8 @@ public class Method implements Comparable<Method> {
         return parameterTypes.size() == i || method.isVarArgs();
     }
     @Override
-    public int compareTo(Method m) {
-        int ret = this.name.compareTo(m.name)
-
-        if (ret == 0){
-            ret = parameters.size() < m.parameters.size()
-
-            if (ret == 0) {
-                ret = this.toString().compareTo(m.toString())
-            }
-        }
-        ret
+    public int compareTo(Object o) {
+        return this.toString().compareTo(o.toString());
     }
 
 }
diff --git a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Parameter.groovy b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Parameter.groovy
index c2a74c6..18246e0 100644
--- a/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Parameter.groovy
+++ b/src/main/groovy/org/jenkinsci/plugins/jobdsl/stub/model/Parameter.groovy
@@ -9,7 +9,7 @@ import java.util.List;
  * Created by jeremymarshall on 31/12/2014.
  */
 
-public class Parameter {
+public class Parameter  implements Comparable {
 
     private Method method;
     private String type;
@@ -25,7 +25,7 @@ public class Parameter {
     public Parameter(org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Parameter p, java.lang.Class rp, Type gpt, Method m, boolean isLast) {
         //name = p.getName();
         //description = p.description();
-        type = convertType( rp )
+        type = rp.getName();
         //genericType = gpt.toString();
         parameter = rp;
 
@@ -39,17 +39,17 @@ public class Parameter {
                 //so no Map<String, String> type things here
                 parameterArgType = pat;
                 genericClass = pat.getClass();
-                genericType = convertType( parameterArgType )
+                genericType = parameterArgType.toString();
             }
             description = type + "<" + genericType + "> " + p.description();
         } else {
             genericClass = rp.getComponentType();
 
             if( rp.isArray()) {
-                genericType = convertType( rp.getComponentType() )
+                genericType = rp.getComponentType().getName();
                 isArray = true;
                 if(isLast) {
-                    description = convertType( genericType ) + "... " + p.description();
+                    description = genericType + "... " + p.description();
                     isVaArg = true;
                 } else {
                     description = genericType + "[] " + p.description();
@@ -60,14 +60,6 @@ public class Parameter {
         }
     }
 
-    static private String convertType(Object t) {
-        t.toString().tokenize('.').last()
-    }
-
-    static private String convertType(Class t) {
-        t.toString().tokenize('.').last()
-    }
-
     public String getType(){
         return type;
     }
@@ -84,10 +76,10 @@ public class Parameter {
         return description;
     }
 
-    //@Override
-    //public int compareTo(Object o) {
-    //    return this.toString().compareTo(o.toString());
-    //}
+    @Override
+    public int compareTo(Object o) {
+        return this.toString().compareTo(o.toString());
+    }
 
     public Object getInstance(int size) {//throws InstantiationException, IllegalAccessException {
         return Array.newInstance(genericClass, size);
@@ -109,10 +101,7 @@ public class Parameter {
         //look through remaining params to see if they fit if the last param a vararg and not yet matched
         if (!ret && isVaArg) {
             for (int j = currentParam; j < parameterTypes.size(); j++) {
-
-                String pt = convertType( parameterTypes.get(j).getName() )
-
-                ret = genericType == pt
+                ret = genericType == parameterTypes.get(j).getName();
 
                 //stop looking if we don't match
                 if (!ret) {
diff --git a/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.java b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.java
new file mode 100644
index 0000000..c0721a9
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslClosureUnsupported.java
@@ -0,0 +1,7 @@
+package org.jenkinsci.plugins.jobdsl.stub;
+
+/**
+ * Created by jeremymarshall on 26/01/2015.
+ */
+public class DslClosureUnsupported extends Exception {
+}
diff --git a/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslLink.java b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslLink.java
new file mode 100644
index 0000000..726ec4d
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/DslLink.java
@@ -0,0 +1,49 @@
+package org.jenkinsci.plugins.jobdsl.stub;
+
+import hudson.Extension;
+import hudson.model.Describable;
+import hudson.model.Descriptor;
+import hudson.model.ManagementLink;
+import jenkins.model.Jenkins;
+import org.jenkinsci.plugins.jobdsl.stub.Factory;
+
+@Extension
+public class DslLink extends ManagementLink implements Describable<DslLink> {
+    private Factory factory = new Factory();
+
+    @Override
+    public String getDisplayName() {
+        return "Jenkins DSL";
+    }
+
+    @Override
+    public String getDescription() {
+        return "Stubs for Job-DSL";
+    }
+
+    @Override
+    public String getIconFileName() {
+        return "aaa.png";
+    }
+
+    @Override
+    public String getUrlName() {
+        return "dsl";
+    }
+
+    public Factory getFactory() {
+        return factory;
+    }
+
+    @SuppressWarnings("unchecked")
+    public Descriptor<DslLink> getDescriptor() {
+        return Jenkins.getInstance().getDescriptorOrDie(getClass());
+    }
+
+    @Extension // This indicates to Jenkins that this is an implementation of an extension point.
+    public static final class DescriptorImpl extends Descriptor<DslLink> {
+        public String getDisplayName() {
+            return "DSL Link";
+        }
+    }
+}
diff --git a/src/main/java/org/jenkinsci/plugins/jobdsl/stub/Factory.java b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/Factory.java
new file mode 100644
index 0000000..881dcda
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/jobdsl/stub/Factory.java
@@ -0,0 +1,58 @@
+package org.jenkinsci.plugins.jobdsl.stub;
+
+import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category;
+
+import java.util.*;
+
+/**
+ * Created by jeremymarshall on 31/12/2014.
+ */
+
+public class Factory  {
+
+    private Map<String, org.jenkinsci.plugins.jobdsl.stub.model.Category> categories;
+    private List<org.jenkinsci.plugins.jobdsl.stub.model.Category> categoriesAsList;
+
+    List ba;
+
+    public Factory() {
+        categories = new TreeMap<String, org.jenkinsci.plugins.jobdsl.stub.model.Category>();
+
+        for (Category a : Category.all()) {
+            add(a);
+        }
+
+        categoriesAsList = new ArrayList<org.jenkinsci.plugins.jobdsl.stub.model.Category>(categories.values());
+        Collections.sort(categoriesAsList);
+    }
+
+    public Category add(Category a) {
+
+        if(!categories.containsKey(a.getCategory())) {
+            categories.put(a.getCategory(), new org.jenkinsci.plugins.jobdsl.stub.model.Category(a));
+        }
+
+        //so the individual categories are extension points too so
+        //they will appear in the list even when no actual plugins implement them
+        //keep them out of the classes though!
+
+        //if there are no methods it must be a category (step, scm, etc)
+        //don't forget to get your concrete classes to set this to true
+        if( a.hasMethods()) {
+            categories.get(a.getCategory()).add(a);
+        } else {
+            categories.get(a.getCategory()).update(a);
+        }
+
+        return a;
+    }
+
+    public org.jenkinsci.plugins.jobdsl.stub.model.Category getCategory( Class c) {
+        return categories.get(c.getName());
+    }
+
+    public List<org.jenkinsci.plugins.jobdsl.stub.model.Category> getCategoriesAsList(){
+        return categoriesAsList;
+    }
+
+}
diff --git a/src/main/resources/org/jenkinsci/plugins/jobdsl/stub/DslLink/index.jelly b/src/main/resources/org/jenkinsci/plugins/jobdsl/stub/DslLink/index.jelly
index 0146d07..89a9608 100644
--- a/src/main/resources/org/jenkinsci/plugins/jobdsl/stub/DslLink/index.jelly
+++ b/src/main/resources/org/jenkinsci/plugins/jobdsl/stub/DslLink/index.jelly
@@ -11,8 +11,8 @@
     <l:main-panel>
       <h1><img src="${resURL}/images/32x32/jobdsl.png" alt=""/>${%DSL Stubs}</h1>
       <p>${%These are the methods available to job-dsl from within your installed plugins.}</p>
+      <f:form method="post" name="config" action="configSubmit">
 
-       <!--
        <f:block>
           <table>
             <j:forEach  var="cat" items="${it.factory.categoriesAsList}" >
@@ -41,6 +41,9 @@
 
                   <j:forEach var="p" items="${m.parameters}">
                     <tr>
+                      <!--<td></td>
+                      <td></td>
+                      <td></td>-->
                       <td colspan="4"><f:readOnlyTextbox value="${p.description}"/></td>
                     </tr>
                   </j:forEach>
@@ -49,10 +52,14 @@
             </j:forEach>
           </table>
         </f:block>
-        -->
-       <f:textarea value="${it.dslInterface}" codemirror-mode="groovy"
-                    codemirror-config="mode: 'text/x-groovy', readOnly: true, lineNumbers: true, matchBrackets: true"/>
 
+
+        <f:block>
+          <f:submit value="${%Save}"/>
+        </f:block>
+
+
+      </f:form>
     </l:main-panel>
   </l:layout>
 </j:jelly>
\ No newline at end of file
diff --git a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLinkSpec.groovy b/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLinkSpec.groovy
deleted file mode 100644
index b9abe5a..0000000
--- a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/DslLinkSpec.groovy
+++ /dev/null
@@ -1,31 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import org.junit.Rule
-import org.jvnet.hudson.test.JenkinsRule
-import spock.lang.Specification
-
-class DslLinkSpec extends Specification {
-    @Rule
-    JenkinsRule rule = new JenkinsRule()
-
-    def 'run'() {
-        when:
-        def d = new DslLink()
-
-        d.factory.add(new TestCategory())
-        d.factory.add(new TestClass())
-        d.factory.add(new TestClosure())
-        d.factory.buildCategoriesAsList()
-
-        d.buildDslInterface()
-
-        then:
-        [
-            'testMethodListString', 'testMethodString',
-            'testMethodVaargsString', 'testMethodWithClosure',
-            'testMethod'].each {
-                assert d.dslInterface.contains(it)
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/FactorySpec.groovy b/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/FactorySpec.groovy
deleted file mode 100644
index a187af6..0000000
--- a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/FactorySpec.groovy
+++ /dev/null
@@ -1,90 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import org.junit.Rule
-import org.jvnet.hudson.test.JenkinsRule
-import spock.lang.Specification
-
-class FactorySpec extends Specification {
-    @Rule
-    JenkinsRule rule = new JenkinsRule()
-
-    def 'loaded'() {
-        when:
-        def f = new Factory()
-
-        f.add(new TestCategory())
-        f.add(new TestClass())
-        f.add(new TestClosure())
-        f.buildCategoriesAsList()
-
-        then:
-        assert f.categoriesAsList.size() == 6
-    }
-
-    def 'vaargs'() {
-        when:
-        def f = new Factory()
-
-        f.add(new TestCategory())
-        f.add(new TestClass())
-        f.add(new TestClosure())
-        f.buildCategoriesAsList()
-
-        def ret = f.getCategory(TestCategory).getMethod('testMethodVaargsString', 'a', 'b', 'c').execute('a', 'b', 'c')
-
-        then:
-
-        assert ret instanceof String
-        ret.trim().matches(/a b c/)
-    }
-
-    def 'params'() {
-        when:
-        def f = new Factory()
-
-        f.add(new TestCategory())
-        f.add(new TestClass())
-        f.add(new TestClosure())
-        f.buildCategoriesAsList()
-
-        def ret = f.getCategory(TestCategory).getMethod('testMethodString', 'name').execute('name')
-
-        then:
-
-        assert ret instanceof String
-        ret.matches(/name/)
-    }
-
-    def 'array'() {
-        when:
-        def f = new Factory()
-
-        f.add(new TestCategory())
-        f.add(new TestClass())
-        f.add(new TestClosure())
-        f.buildCategoriesAsList()
-
-        def ret = f.getCategory(TestCategory).getMethod('testMethodListString', [['name']]).execute([['name']])
-
-        then:
-
-        assert ret instanceof String
-        ret.trim().matches(/name/)
-    }
-
-    def 'closure'() {
-        when:
-        def f = new Factory()
-
-        f.add(new TestCategory())
-        f.add(new TestClass())
-        f.add(new TestClosure())
-        f.buildCategoriesAsList()
-        def ret = f.getCategory(TestCategory).getMethod('testMethodWithClosure', {testMethod 'name'}).execute({testMethod 'name'})
-
-        then:
-
-        assert ret instanceof TestClosure
-        ret.testValue.matches(/name/)
-    }
-}
diff --git a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestCategory.groovy b/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestCategory.groovy
deleted file mode 100644
index a7736bd..0000000
--- a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestCategory.groovy
+++ /dev/null
@@ -1,24 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import hudson.Extension
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Category
-
-@Extension
-public class TestCategory extends Category {
-
-    @Override
-    public String getName() { return "test";}
-
-    @Override
-    public String getDescription() { return "Test";}
-
-    @Override
-    public final String getCategory(){
-        return TestCategory.class.getName();
-    }
-
-    @Override
-    public int ordinal() {
-        50
-    }
-}
\ No newline at end of file
diff --git a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClass.groovy b/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClass.groovy
deleted file mode 100644
index a7842e6..0000000
--- a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClass.groovy
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import hudson.Extension
-import org.jenkinsci.plugins.jobdsl.stub.TestClosure
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Method
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Parameter
-import java.lang.String
-
-@Extension
-public class TestClass extends TestCategory {
-
-    @Override
-    public String getName() {
-        return "testClass";
-    }
-
-    @Override
-    public String getDescription() {
-        return "test class";
-    }
-
-    @Override
-    public int ordinal() {
-        50
-    }
-
-    @Override
-    public final boolean hasMethods() {
-        return true
-    }
-
-    @Method(description = "test method with a closure", closureClass = TestClosure)
-    public Object testMethodWithClosure(@Parameter(description = "test closure") Object closure) {
-        TestClosure i = runClosure(closure, TestClosure)
-        i
-    }
-
-    @Method(description = "test method with string param")
-    public Object testMethodString (@Parameter(description = "name") String name) {
-        new String(name)
-    }
-
-    @Method(description = "test method with string list")
-    public Object testMethodListString (@Parameter(description = "names") List<String> name) {
-
-        String s = ''
-        name.each { s += "${it} "}
-        new String(s)
-    }
-
-    @Method(description = "test method with string vaarg")
-    public Object testMethodVaargsString (@Parameter(description = "names") String... name) {
-
-        testMethodListString(Arrays.asList(name))
-    }
-}
-
diff --git a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClosure.groovy b/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClosure.groovy
deleted file mode 100644
index 2001400..0000000
--- a/src/test/groovy/org/jenkinsci/plugins/jobdsl/stub/TestClosure.groovy
+++ /dev/null
@@ -1,32 +0,0 @@
-package org.jenkinsci.plugins.jobdsl.stub
-
-import hudson.Extension
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Closure
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Method
-import org.jenkinsci.plugins.jobdsl.stub.annotations.dsl.Parameter
-
-@Extension
-public class TestClosure extends Closure {
-
-    String testValue
-
-    @Override
-    public String getName() {
-        return "testClosure";
-    }
-
-    @Override
-    public String getDescription() {
-        return "Test closure";
-    }
-
-    @Override
-    public final boolean hasMethods() {
-        return true;
-    };
-
-    @Method(description = "Method")
-    public void testMethod(@Parameter(description = "test closure method") String value) {
-        this.testValue = value
-    }
-}
